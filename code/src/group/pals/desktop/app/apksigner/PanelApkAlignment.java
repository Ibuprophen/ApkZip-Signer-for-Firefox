/*
 *    Copyright (C) 2012 Hai Bison
 *
 *    See the file LICENSE at the root directory of this project for copying
 *    permission.
 */

package group.pals.desktop.app.apksigner;

import group.pals.desktop.app.apksigner.i18n.Messages;
import group.pals.desktop.app.apksigner.i18n.R;
import group.pals.desktop.app.apksigner.services.INotification;
import group.pals.desktop.app.apksigner.services.ServiceManager;
import group.pals.desktop.app.apksigner.ui.Dlg;
import group.pals.desktop.app.apksigner.ui.JEditorPopupMenu;
import group.pals.desktop.app.apksigner.utils.Files;
import group.pals.desktop.app.apksigner.utils.Preferences;
import group.pals.desktop.app.apksigner.utils.Texts;
import group.pals.desktop.app.apksigner.utils.UI;
import group.pals.desktop.app.apksigner.utils.ZipAlign;
import group.pals.desktop.app.apksigner.utils.ZipAlign.ZipAligner;

import java.awt.BorderLayout;
import java.awt.Font;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;

import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;

/**
 * APK alignment tools.
 * 
 * @author Hai Bison
 * @since v1.6.9 beta
 */
public class PanelApkAlignment extends JPanel {

    /**
     * Auto-generated by Eclipse.
     */
    private static final long serialVersionUID = -8324003229922201602L;

    /**
     * The class name.
     */
    private static final String CLASSNAME = PanelApkAlignment.class.getName();

    /**
     * This key holds the last working directory.
     */
    private static final String PKEY_LAST_WORKING_DIR = CLASSNAME
            + ".last_working_dir";

    /*
     * FIELDS
     */

    private File mApkFile;

    /*
     * CONTROLS
     */

    private JButton mBtnLoadApkFile;
    private JButton mBtnVerify;
    private JButton mBtnAlign;
    private JTextArea mTextInfo;
    private JProgressBar mProgressBar;
    private JScrollPane mTextInfoScrollPane;

    /**
     * Create the panel.
     */
    public PanelApkAlignment() {
        setLayout(new BorderLayout(10, 10));

        JPanel panel = new JPanel();
        add(panel, BorderLayout.NORTH);

        JPanel panel_1 = new JPanel();
        panel.setLayout(new BorderLayout(5, 5));
        panel.add(panel_1, BorderLayout.CENTER);

        mBtnLoadApkFile = new JButton(
                Messages.getString(R.string.desc_load_apk_file));
        mBtnLoadApkFile.addActionListener(mBtnLoadApkFileActionListener);
        panel_1.add(mBtnLoadApkFile);

        mBtnVerify = new JButton(Messages.getString(R.string.verify));
        mBtnVerify.addActionListener(mBtnVerifyActionListener);
        panel_1.add(mBtnVerify);

        mBtnAlign = new JButton(Messages.getString(R.string.align));
        mBtnAlign.addActionListener(mBtnAlignActionListener);
        panel_1.add(mBtnAlign);

        JSeparator separator = new JSeparator();
        panel.add(separator, BorderLayout.NORTH);

        mProgressBar = new JProgressBar();
        panel.add(mProgressBar, BorderLayout.SOUTH);

        mTextInfoScrollPane = new JScrollPane();
        add(mTextInfoScrollPane, BorderLayout.CENTER);

        mTextInfo = new JTextArea();
        mTextInfo.setTabSize(UI.TEXT_COMPONENT_TAB_SIZE);
        mTextInfo.setMargin(new Insets(9, 9, 9, 9));
        mTextInfo.setFont(new Font("Monospaced",
                mTextInfo.getFont().getStyle(), mTextInfo.getFont().getSize()));
        mTextInfo.setEditable(false);
        mTextInfoScrollPane.setViewportView(mTextInfo);

        JEditorPopupMenu.apply(this);
    }// PanelApkAlignment()

    /**
     * Enables/ disables commands.
     * 
     * @param enabled
     *            {@code true} or {@code false}.
     */
    private void enableCommands(boolean enabled) {
        for (JComponent comp : new JComponent[] { mBtnLoadApkFile, mBtnVerify,
                mBtnAlign })
            comp.setEnabled(enabled);
    }// enableCommands()

    /*
     * LISTENERS
     */

    private final ActionListener mBtnLoadApkFileActionListener = new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            mApkFile = Files.chooseFile(
                    new File(Preferences.getInstance().get(
                            PKEY_LAST_WORKING_DIR, "/")),
                    Texts.REGEX_APK_FILES,
                    Messages.getString(R.string.desc_apk_files));
            if (mApkFile != null) {
                mBtnLoadApkFile.setText(mApkFile.getName());
                mBtnLoadApkFile.setForeground(UI.COLOUR_SELECTED_FILE);
                Preferences.getInstance().set(PKEY_LAST_WORKING_DIR,
                        mApkFile.getParentFile().getAbsolutePath());
            } else {
                mBtnLoadApkFile.setText(Messages
                        .getString(R.string.desc_load_apk_file));
                mBtnLoadApkFile.setForeground(UI.COLOUR_WAITING_CMD);
            }
        }// actionPerformed()
    };// mBtnLoadApkFileActionListener

    private final ActionListener mBtnVerifyActionListener = new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            // TODO Auto-generated method stub
        }// actionPerformed()
    };// mBtnVerifyActionListener

    private final ActionListener mBtnAlignActionListener = new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            if (mApkFile == null || !mApkFile.isFile()) {
                Dlg.showInfoMsg(null, null,
                        Messages.getString(R.string.msg_load_apk_file));
                return;
            }

            final File outputFile = new File(mApkFile.getParent()
                    + File.separator
                    + Files.appendFilename(mApkFile.getName(), "_"
                            + ZipAlign.ALIGNED));
            if (outputFile.isFile()) {
                if (!Dlg.confirmYesNo(null, null, Messages.getString(
                        R.string.pmsg_override_file, outputFile.getName()),
                        false))
                    return;
            }

            mTextInfo.setText(null);
            mProgressBar.setValue(0);
            enableCommands(false);

            final ZipAligner zipAligner = new ZipAligner(mApkFile, outputFile);
            ServiceManager.registerThread(zipAligner);
            zipAligner.addNotification(new INotification() {

                @Override
                public boolean onMessage(final Message msg) {
                    switch (msg.id) {
                    case ZipAligner.MSG_ERROR:
                        mTextInfo.append("\n\n");
                        mTextInfo.append(msg.detailedMessage);
                        break;
                    case ZipAligner.MSG_DONE:
                        enableCommands(true);
                        break;
                    default:
                        mTextInfo.append(msg.detailedMessage);
                        break;
                    }

                    SwingUtilities.invokeLater(new Runnable() {

                        @Override
                        public void run() {
                            if (msg.id == ZipAligner.MSG_INFO
                                    && msg.obj instanceof Double)
                                mProgressBar.setValue((int) Math
                                        .round((Double) msg.obj));

                            mTextInfoScrollPane.getHorizontalScrollBar()
                                    .setValue(0);
                            mTextInfoScrollPane.getVerticalScrollBar()
                                    .setValue(
                                            mTextInfoScrollPane
                                                    .getVerticalScrollBar()
                                                    .getMaximum());
                        }// run()
                    });

                    return false;
                }// onMessage()
            });

            zipAligner.start();
        }// actionPerformed()
    };// mBtnAlignActionListener

}
