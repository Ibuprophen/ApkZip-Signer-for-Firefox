/*
 *    Copyright (C) 2012 Hai Bison
 *
 *    See the file LICENSE at the root directory of this project for copying
 *    permission.
 */

package group.pals.desktop.app.apksigner;

import group.pals.desktop.app.apksigner.i18n.Messages;
import group.pals.desktop.app.apksigner.ui.Dlg;
import group.pals.desktop.app.apksigner.ui.JEditorPopupMenu;
import group.pals.desktop.app.apksigner.utils.Files;
import group.pals.desktop.app.apksigner.utils.Files.JFileChooserEx;
import group.pals.desktop.app.apksigner.utils.Preferences;
import group.pals.desktop.app.apksigner.utils.Signer;
import group.pals.desktop.app.apksigner.utils.Texts;
import group.pals.desktop.app.apksigner.utils.UI;

import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.Arrays;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.border.TitledBorder;
import javax.swing.filechooser.FileFilter;

/**
 * Panel to sign APK files.
 * 
 * @author Hai Bison
 * @since v1.6 beta
 */
public class PanelSigner extends JPanel {

    /**
     * Auto-generated by Eclipse.
     */
    private static final long serialVersionUID = -874904794558103202L;

    /**
     * The class name.
     */
    private static final String CLASSNAME = PanelSigner.class.getName();

    /**
     * This key holds the last working directory.
     */
    private static final String PKEY_LAST_WORKING_DIR = CLASSNAME
            + ".last_working_dir";

    /**
     * This key holds the last target file filter's ID.
     */
    private static final String PKEY_LAST_TARGET_FILE_FILTER_ID = CLASSNAME
            + ".last_target_file_filter_ID";

    /**
     * Target file filters.
     */
    private static final List<FileFilter> TARGET_FILE_FILTERS = Arrays.asList(
            Files.newFileFilter(JFileChooser.FILES_ONLY, Texts.REGEX_APK_FILES,
                    Messages.getString("desc_apk_files")), Files.newFileFilter(
                    JFileChooser.FILES_ONLY, Texts.REGEX_JAR_FILES,
                    Messages.getString("desc_jar_files")), Files.newFileFilter(
                    JFileChooser.FILES_ONLY, Texts.REGEX_ZIP_FILES,
                    Messages.getString("desc_zip_files")));

    /*
     * FIELDS
     */

    private File mKeyfile;
    private File mTargetFile;

    /*
     * CONTROLS
     */

    private JPasswordField mTextPassword;
    private JTextField mTextAlias;
    private JPasswordField mTextAliasPassword;
    private JButton mBtnChooseKeyfile;
    private JButton mBtnChooseTargetFile;
    private JButton mBtnSign;

    /**
     * Create the panel.
     */
    public PanelSigner() {
        GridBagLayout gridBagLayout = new GridBagLayout();
        gridBagLayout.columnWidths = new int[] { 0, 0 };
        gridBagLayout.rowHeights = new int[] { 0, 0, 0, 0, 0, 0, 0 };
        gridBagLayout.columnWeights = new double[] { 1.0, Double.MIN_VALUE };
        gridBagLayout.rowWeights = new double[] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                Double.MIN_VALUE };
        setLayout(gridBagLayout);

        mBtnChooseKeyfile = new JButton(
                Messages.getString("desc_load_key_file"));
        mBtnChooseKeyfile.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                mKeyfile = Files.chooseFile(new File(Preferences.getInstance()
                        .get(PKEY_LAST_WORKING_DIR, "/")),
                        Texts.REGEX_KEYSTORE_FILES, Messages
                                .getString("desc_keystore_files"));
                if (mKeyfile != null) {
                    mBtnChooseKeyfile.setText(mKeyfile.getName());
                    mBtnChooseKeyfile.setForeground(UI.COLOUR_SELECTED_FILE);
                    Preferences.getInstance().set(PKEY_LAST_WORKING_DIR,
                            mKeyfile.getParentFile().getAbsolutePath());
                } else {
                    mBtnChooseKeyfile.setText(Messages
                            .getString("desc_load_key_file"));
                    mBtnChooseKeyfile.setForeground(UI.COLOUR_WAITING_CMD);
                }
            }// actionPerformed()
        });
        GridBagConstraints gbc_mBtnChooseKeyfile = new GridBagConstraints();
        gbc_mBtnChooseKeyfile.insets = new Insets(10, 3, 3, 3);
        gbc_mBtnChooseKeyfile.gridx = 0;
        gbc_mBtnChooseKeyfile.gridy = 0;
        add(mBtnChooseKeyfile, gbc_mBtnChooseKeyfile);

        mTextPassword = new JPasswordField();
        mTextPassword.setHorizontalAlignment(SwingConstants.CENTER);
        mTextPassword.setBorder(new TitledBorder(null, Messages
                .getString("password"), TitledBorder.LEADING, TitledBorder.TOP,
                null, null));
        GridBagConstraints gbc_mTextPassword = new GridBagConstraints();
        gbc_mTextPassword.insets = new Insets(3, 3, 3, 3);
        gbc_mTextPassword.fill = GridBagConstraints.HORIZONTAL;
        gbc_mTextPassword.gridx = 0;
        gbc_mTextPassword.gridy = 1;
        add(mTextPassword, gbc_mTextPassword);

        mTextAlias = new JTextField();
        mTextAlias.setHorizontalAlignment(SwingConstants.CENTER);
        mTextAlias.setBorder(new TitledBorder(null,
                Messages.getString("alias"), TitledBorder.LEADING,
                TitledBorder.TOP, null, null));
        GridBagConstraints gbc_mTextAlias = new GridBagConstraints();
        gbc_mTextAlias.insets = new Insets(3, 3, 3, 3);
        gbc_mTextAlias.fill = GridBagConstraints.HORIZONTAL;
        gbc_mTextAlias.gridx = 0;
        gbc_mTextAlias.gridy = 2;
        add(mTextAlias, gbc_mTextAlias);
        mTextAlias.setColumns(10);

        mTextAliasPassword = new JPasswordField();
        mTextAliasPassword.setHorizontalAlignment(SwingConstants.CENTER);
        mTextAliasPassword.setBorder(new TitledBorder(null, Messages
                .getString("alias_password"), TitledBorder.LEADING,
                TitledBorder.TOP, null, null));
        GridBagConstraints gbc_mTextAliasPassword = new GridBagConstraints();
        gbc_mTextAliasPassword.insets = new Insets(3, 3, 3, 3);
        gbc_mTextAliasPassword.fill = GridBagConstraints.HORIZONTAL;
        gbc_mTextAliasPassword.gridx = 0;
        gbc_mTextAliasPassword.gridy = 3;
        add(mTextAliasPassword, gbc_mTextAliasPassword);

        mBtnChooseTargetFile = new JButton(
                Messages.getString("desc_load_target_file"));
        mBtnChooseTargetFile.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                final String lastFileFilterId = Preferences.getInstance().get(
                        PKEY_LAST_TARGET_FILE_FILTER_ID);
                final JFileChooserEx fileChooser = new JFileChooserEx(new File(
                        Preferences.getInstance().get(PKEY_LAST_WORKING_DIR,
                                "/")));
                fileChooser.setDialogTitle(Messages.getString("choose_file"));
                fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

                for (int i = 0; i < TARGET_FILE_FILTERS.size(); i++) {
                    FileFilter filter = TARGET_FILE_FILTERS.get(i);
                    fileChooser.addChoosableFileFilter(filter);
                    if ((Texts.isEmpty(lastFileFilterId) && i == 0)
                            || Integer.toString(i).equals(lastFileFilterId))
                        fileChooser.setFileFilter(filter);
                }

                switch (fileChooser.showOpenDialog(null)) {
                case JFileChooser.APPROVE_OPTION: {
                    mTargetFile = fileChooser.getSelectedFile();

                    mBtnChooseTargetFile.setText(mTargetFile.getName());
                    mBtnChooseTargetFile.setForeground(UI.COLOUR_SELECTED_FILE);
                    Preferences.getInstance().set(PKEY_LAST_WORKING_DIR,
                            mTargetFile.getParentFile().getAbsolutePath());
                    Preferences.getInstance().set(
                            PKEY_LAST_TARGET_FILE_FILTER_ID,
                            Integer.toString(TARGET_FILE_FILTERS
                                    .indexOf(fileChooser.getFileFilter())));

                    break;
                }// APPROVE_OPTION

                default: {
                    mTargetFile = null;

                    mBtnChooseTargetFile.setText(Messages
                            .getString("desc_load_target_file"));
                    mBtnChooseTargetFile.setForeground(UI.COLOUR_WAITING_CMD);

                    break;
                }// default
                }
            }// actionPerformed()
        });
        GridBagConstraints gbc_mBtnChooseApkFile = new GridBagConstraints();
        gbc_mBtnChooseApkFile.insets = new Insets(3, 3, 3, 3);
        gbc_mBtnChooseApkFile.gridx = 0;
        gbc_mBtnChooseApkFile.gridy = 4;
        add(mBtnChooseTargetFile, gbc_mBtnChooseApkFile);

        mBtnSign = new JButton(Messages.getString("sign"));
        mBtnSign.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (validateFields())
                    signTargetFile();
            }// actionPerformed()
        });
        GridBagConstraints gbc_mBtnSign = new GridBagConstraints();
        gbc_mBtnSign.insets = new Insets(10, 10, 10, 10);
        gbc_mBtnSign.gridx = 0;
        gbc_mBtnSign.gridy = 5;
        add(mBtnSign, gbc_mBtnSign);

        UI.setEditorPopupMenu(this, new JEditorPopupMenu());
    }// PanelSigner()

    /**
     * Validates all fields.
     * 
     * @return {@code true} or {@code false}.
     */
    private boolean validateFields() {
        if (mKeyfile == null || !mKeyfile.isFile() || !mKeyfile.canRead()) {
            Dlg.showErrMsg(null, null,
                    Messages.getString("msg_keyfile_doesnt_exist"));
            mBtnChooseKeyfile.requestFocus();
            return false;
        }

        if (mTextPassword.getPassword() == null
                || mTextPassword.getPassword().length == 0) {
            Dlg.showErrMsg(null, null,
                    Messages.getString("msg_password_is_empty"));
            mTextPassword.requestFocus();
            return false;
        }

        if (mTextAlias.getText() == null
                || mTextAlias.getText().trim().isEmpty()) {
            Dlg.showErrMsg(null, null, Messages.getString("msg_alias_is_empty"));
            mTextAlias.requestFocus();
            return false;
        }

        if (mTextAliasPassword.getPassword() == null
                || mTextAliasPassword.getPassword().length == 0) {
            Dlg.showErrMsg(null, null,
                    Messages.getString("msg_alias_password_is_empty"));
            mTextAliasPassword.requestFocus();
            return false;
        }

        if (mTargetFile == null || !mTargetFile.isFile()
                || !mTargetFile.canWrite()) {
            Dlg.showInfoMsg(null, null,
                    Messages.getString("msg_load_a_file_to_sign"));
            mBtnChooseTargetFile.requestFocus();
            return false;
        }

        return true;
    }// validateFields()

    /**
     * Signs the target file.
     * <p>
     * <b>Notes:</b> You should call {@link #validateFields()} first.
     * </p>
     */
    private void signTargetFile() {
        try {
            String info = Signer.sign(Preferences.getInstance().getJdkPath(),
                    mTargetFile, mKeyfile, mTextPassword.getPassword(),
                    mTextAlias.getText().trim(),
                    mTextAliasPassword.getPassword());
            if (info == null || info.isEmpty())
                Dlg.showInfoMsg(null, null,
                        Messages.getString("msg_file_is_signed"));
            else
                Dlg.showErrMsg(null, null,
                        Messages.getString("pmsg_error_signing_file", info));
        } catch (Exception e) {
            Dlg.showErrMsg(null, null,
                    Messages.getString("pmsg_error_signing_file", e));
        }
    }// signTargetFile()
}
