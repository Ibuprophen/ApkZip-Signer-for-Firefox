/*
 *    Copyright (C) 2012 Hai Bison
 *
 *    See the file LICENSE at the root directory of this project for copying
 *    permission.
 */

package group.pals.desktop.app.apksigner.ui;

import group.pals.desktop.app.apksigner.i18n.Messages;

import java.awt.Component;
import java.awt.event.ActionEvent;

import javax.swing.Action;
import javax.swing.JMenuItem;
import javax.swing.JPasswordField;
import javax.swing.JPopupMenu;
import javax.swing.text.JTextComponent;
import javax.swing.text.TextAction;

/**
 * Editor popup menu for {@link JTextComponent}.
 * 
 * @author Hai Bison
 * @since v1.6 beta
 */
public class JEditorPopupMenu extends JPopupMenu {

    /**
     * Auto-generated by Eclipse.
     */
    private static final long serialVersionUID = 5578010916105435603L;

    public final static String ACTION_NAME_CUT = "cut";
    public final static String ACTION_NAME_COPY = "copy";
    public final static String ACTION_NAME_COPY_ALL = "copy-all";
    public final static String ACTION_NAME_PASTE = "paste";
    public final static String ACTION_NAME_CLEAR_AND_PASTE = "clear-and-paste";
    public final static String ACTION_NAME_CLEAR = "clear";
    public final static String ACTION_NAME_DELETE = "delete";
    public final static String ACTION_NAME_SELECT_ALL = "select-all";

    /**
     * Extended class of {@link TextAction}.
     * 
     * @author Hai Bison
     * @since v1.6 beta
     */
    public static abstract class TextActionEx extends TextAction {

        /**
         * Auto-generated by Eclipse.
         */
        private static final long serialVersionUID = 852449530907004277L;

        /**
         * Creates new action.
         * 
         * @param name
         *            the action name.
         */
        public TextActionEx(String name) {
            super(name);
        }// TextActionEx()

        /**
         * Checks whether this action is enabled with {@code component}.
         * 
         * @param component
         *            the owner component of this action.
         * @return {@code true} or {@code false}.
         */
        abstract boolean isEnabledWith(JTextComponent component);
    }// TextActionEx

    /**
     * Creates new instance.
     */
    public JEditorPopupMenu() {
        super();
        initMenuItems();
    }// JEditorPopupMenu()

    /**
     * Initializes all menu items.
     */
    private void initMenuItems() {
        final String itemSeparator = "-";
        final String[] itemTitles = { Messages.getString("context_menu_cut"),
                Messages.getString("context_menu_copy"),
                Messages.getString("context_menu_copy_all"),
                Messages.getString("context_menu_paste"), itemSeparator,
                Messages.getString("context_menu_clear_and_paste"),
                Messages.getString("context_menu_clear"),
                Messages.getString("context_menu_delete"), itemSeparator,
                Messages.getString("context_menu_select_all") };
        final Action[] itemActions = { new CutAction(itemTitles[0]),
                new CopyAction(itemTitles[1]),
                new CopyAllAction(itemTitles[2]),
                new PasteAction(itemTitles[3]), null,
                new ClearAndPasteAction(itemTitles[4]),
                new ClearAction(itemTitles[5]),
                new DeleteAction(itemTitles[6]), null,
                new SelectAllAction(itemTitles[7]) };
        for (int i = 0; i < itemTitles.length; i++) {
            if (itemTitles[i].equals(itemSeparator)) {
                Separator separator = new JPopupMenu.Separator();
                this.add(separator);
            } else {
                JMenuItem menuItem = new JMenuItem();
                menuItem.setAction(itemActions[i]);
                menuItem.setText(itemTitles[i]);
                menuItem.setToolTipText(itemTitles[i]);
                this.add(menuItem);
            }
        }// for
    }// initMenuItems()

    /**
     * Fires an action... (TODO ???)
     * 
     * @param actionName
     *            the action name.
     */
    private void fireAfterActionPerformed(String actionName) {
        Component invoker = getInvoker();
        if (invoker != null)
            invoker.firePropertyChange(actionName, 0, 1);
    }// fireAfterActionPerformed()

    /*
     * EDITOR ACTIONS
     */
    /**
     * The CUT action.
     */
    private class CutAction extends TextActionEx {

        /**
         * Auto-generated by Eclipse.
         */
        private static final long serialVersionUID = -1982804538265472293L;

        /**
         * Creates new instance.
         * 
         * @param name
         *            the action name.
         */
        public CutAction(String name) {
            super(name);
        }// CutAction()

        @Override
        public void actionPerformed(ActionEvent e) {
            if (e.getSource() instanceof JMenuItem) {
                if (((JMenuItem) e.getSource()).getParent() instanceof JPopupMenu) {
                    JPopupMenu popupMenu = (JPopupMenu) ((JMenuItem) e
                            .getSource()).getParent();
                    if (popupMenu.getInvoker() instanceof JTextComponent) {
                        JTextComponent textComponent = (JTextComponent) popupMenu
                                .getInvoker();
                        textComponent.cut();
                        textComponent.requestFocusInWindow();

                        fireAfterActionPerformed(ACTION_NAME_CUT);
                    }
                }
            }
        }// actionPerformed()

        @Override
        boolean isEnabledWith(JTextComponent component) {
            return !(component instanceof JPasswordField)
                    && component.isEnabled() && component.isEditable();
        }// isEnabledWith()
    }// CutAction

    /**
     * The COPY action.
     */
    private class CopyAction extends TextActionEx {

        /**
         * Auto-generated by Eclipse.
         */
        private static final long serialVersionUID = -3254837350008467760L;

        /**
         * Creates new instance.
         * 
         * @param name
         *            the action name.
         */
        public CopyAction(String name) {
            super(name);
        }// CopyAction()

        @Override
        public void actionPerformed(ActionEvent e) {
            if (e.getSource() instanceof JMenuItem) {
                if (((JMenuItem) e.getSource()).getParent() instanceof JPopupMenu) {
                    JPopupMenu popupMenu = (JPopupMenu) ((JMenuItem) e
                            .getSource()).getParent();
                    if (popupMenu.getInvoker() instanceof JTextComponent) {
                        JTextComponent textComponent = (JTextComponent) popupMenu
                                .getInvoker();
                        textComponent.copy();
                        textComponent.requestFocusInWindow();

                        fireAfterActionPerformed(ACTION_NAME_COPY);
                    }
                }
            }
        }// actionPerformed()

        @Override
        boolean isEnabledWith(JTextComponent component) {
            return !(component instanceof JPasswordField)
                    && component.isEnabled();
        }// isEnabledWith()
    }// CopyAction

    /**
     * The COPY ALL action.
     */
    private class CopyAllAction extends TextActionEx {

        /**
         * Auto-generated by Eclipse.
         */
        private static final long serialVersionUID = 4615951043416333486L;

        /**
         * Creates new instance.
         * 
         * @param name
         *            the action name.
         */
        public CopyAllAction(String name) {
            super(name);
        }// CopyAllAction()

        @Override
        public void actionPerformed(ActionEvent e) {
            if (e.getSource() instanceof JMenuItem) {
                if (((JMenuItem) e.getSource()).getParent() instanceof JPopupMenu) {
                    JPopupMenu popupMenu = (JPopupMenu) ((JMenuItem) e
                            .getSource()).getParent();
                    if (popupMenu.getInvoker() instanceof JTextComponent) {
                        JTextComponent textComponent = (JTextComponent) popupMenu
                                .getInvoker();
                        textComponent.selectAll();
                        textComponent.copy();
                        textComponent.requestFocusInWindow();

                        fireAfterActionPerformed(ACTION_NAME_COPY_ALL);
                    }
                }
            }
        }// actionPerformed()

        @Override
        boolean isEnabledWith(JTextComponent component) {
            return !(component instanceof JPasswordField)
                    && component.isEnabled();
        }// isEnabledWith()
    }// CopyAllAction

    private class PasteAction extends TextActionEx {

        /**
         * Auto-generated by Eclipse.
         */
        private static final long serialVersionUID = 7589082114137081076L;

        /**
         * Creates new instance.
         * 
         * @param name
         *            the action name.
         */
        public PasteAction(String name) {
            super(name);
        }// PasteAction()

        @Override
        public void actionPerformed(ActionEvent e) {
            if (e.getSource() instanceof JMenuItem) {
                if (((JMenuItem) e.getSource()).getParent() instanceof JPopupMenu) {
                    JPopupMenu popupMenu = (JPopupMenu) ((JMenuItem) e
                            .getSource()).getParent();
                    if (popupMenu.getInvoker() instanceof JTextComponent) {
                        JTextComponent textComponent = (JTextComponent) popupMenu
                                .getInvoker();
                        textComponent.paste();
                        textComponent.requestFocusInWindow();

                        fireAfterActionPerformed(ACTION_NAME_PASTE);
                    }
                }
            }
        }// actionPerformed()

        @Override
        boolean isEnabledWith(JTextComponent component) {
            return component.isEnabled() && component.isEditable();
        }// isEnabledWith()
    }// PasteAction

    private class ClearAction extends TextActionEx {

        /**
         * Auto-generated by Eclipse.
         */
        private static final long serialVersionUID = 2003384687851877644L;

        /**
         * Creates new instance.
         * 
         * @param name
         *            the action name.
         */
        public ClearAction(String name) {
            super(name);
        }// ClearAction()

        @Override
        public void actionPerformed(ActionEvent e) {
            if (e.getSource() instanceof JMenuItem) {
                if (((JMenuItem) e.getSource()).getParent() instanceof JPopupMenu) {
                    JPopupMenu popupMenu = (JPopupMenu) ((JMenuItem) e
                            .getSource()).getParent();
                    if (popupMenu.getInvoker() instanceof JTextComponent) {
                        JTextComponent textComponent = (JTextComponent) popupMenu
                                .getInvoker();
                        textComponent.setText(null);
                        textComponent.requestFocusInWindow();

                        fireAfterActionPerformed(ACTION_NAME_CLEAR);
                    }
                }
            }
        }// actionPerformed()

        @Override
        boolean isEnabledWith(JTextComponent component) {
            return component.isEnabled() && component.isEditable();
        }// isEnabledWith()
    }// ClearAction

    private class DeleteAction extends TextActionEx {

        /**
         * Auto-generated by Eclipse.
         */
        private static final long serialVersionUID = 7226805445589511342L;

        /**
         * Creates new instance.
         * 
         * @param name
         *            the action name.
         */
        public DeleteAction(String name) {
            super(name);
        }// DeleteAction()

        @Override
        public void actionPerformed(ActionEvent e) {
            if (e.getSource() instanceof JMenuItem) {
                if (((JMenuItem) e.getSource()).getParent() instanceof JPopupMenu) {
                    JPopupMenu popupMenu = (JPopupMenu) ((JMenuItem) e
                            .getSource()).getParent();
                    if (popupMenu.getInvoker() instanceof JTextComponent) {
                        JTextComponent textComponent = (JTextComponent) popupMenu
                                .getInvoker();
                        int start = textComponent.getSelectionStart();
                        int end = textComponent.getSelectionEnd();
                        if (end > start) {
                            try {
                                String text = textComponent.getText();
                                if (end <= text.length()) {
                                    text = text.substring(0, start)
                                            + text.substring(end);
                                    textComponent.setText(text);
                                    textComponent.setCaretPosition(start);
                                }
                            } catch (Exception ex) {
                                return;
                            }
                        }
                        textComponent.requestFocusInWindow();

                        fireAfterActionPerformed(ACTION_NAME_DELETE);
                    }
                }
            }
        }// actionPerformed()

        @Override
        boolean isEnabledWith(JTextComponent component) {
            return component.isEnabled() && component.isEditable();
        }// isEnabledWith()
    }// DeleteAction

    private class ClearAndPasteAction extends TextActionEx {

        /**
         * Auto-generated by Eclipse.
         */
        private static final long serialVersionUID = -2872364748582253016L;

        /**
         * Creates new instance.
         * 
         * @param name
         *            the action name.
         */
        public ClearAndPasteAction(String name) {
            super(name);
        }// ClearAndPasteAction()

        @Override
        public void actionPerformed(ActionEvent e) {
            if (e.getSource() instanceof JMenuItem) {
                if (((JMenuItem) e.getSource()).getParent() instanceof JPopupMenu) {
                    JPopupMenu popupMenu = (JPopupMenu) ((JMenuItem) e
                            .getSource()).getParent();
                    if (popupMenu.getInvoker() instanceof JTextComponent) {
                        JTextComponent textComponent = (JTextComponent) popupMenu
                                .getInvoker();
                        textComponent.setText(null);
                        textComponent.paste();
                        textComponent.requestFocusInWindow();

                        fireAfterActionPerformed(ACTION_NAME_CLEAR_AND_PASTE);
                    }
                }
            }
        }// actionPerformed()

        @Override
        boolean isEnabledWith(JTextComponent component) {
            return component.isEnabled() && component.isEditable();
        }// isEnabledWith()
    }// ClearAndPasteAction

    private class SelectAllAction extends TextActionEx {

        /**
         * Auto-generated by Eclipse.
         */
        private static final long serialVersionUID = 4749618930737855868L;

        /**
         * Creates new instance.
         * 
         * @param name
         *            the action name.
         */
        public SelectAllAction(String name) {
            super(name);
        }// SelectAllAction()

        @Override
        public void actionPerformed(ActionEvent e) {
            if (e.getSource() instanceof JMenuItem) {
                if (((JMenuItem) e.getSource()).getParent() instanceof JPopupMenu) {
                    JPopupMenu popupMenu = (JPopupMenu) ((JMenuItem) e
                            .getSource()).getParent();
                    if (popupMenu.getInvoker() instanceof JTextComponent) {
                        JTextComponent textComponent = (JTextComponent) popupMenu
                                .getInvoker();
                        textComponent.selectAll();
                        textComponent.requestFocusInWindow();

                        fireAfterActionPerformed(ACTION_NAME_SELECT_ALL);
                    }
                }
            }
        }// actionPerformed()

        @Override
        boolean isEnabledWith(JTextComponent component) {
            return component.isEnabled();
        }// isEnabledWith()
    }// SelectAllAction()

    @Override
    protected void firePopupMenuWillBecomeVisible() {
        /*
         * Checks the source invoker component and fix its actions' state.
         */

        final Component invoker = getInvoker();
        if (invoker instanceof JTextComponent) {
            for (int i = 0; i < getComponentCount(); i++) {
                Component comp = getComponent(i);
                if (comp instanceof JMenuItem) {
                    TextActionEx action = (TextActionEx) ((JMenuItem) comp)
                            .getAction();
                    comp.setEnabled(action
                            .isEnabledWith((JTextComponent) invoker));
                }
            }// for
        }// if
    }// firePopupMenuWillBecomeVisible()
}
