/*
 *    Copyright (C) 2012 Hai Bison
 *
 *    See the file LICENSE at the root directory of this project for copying
 *    permission.
 */

package group.pals.desktop.app.apksigner.ui.prefs;

import group.pals.desktop.app.apksigner.i18n.Messages;
import group.pals.desktop.app.apksigner.i18n.R;
import group.pals.desktop.app.apksigner.utils.L;
import group.pals.desktop.app.apksigner.utils.Preferences;
import group.pals.desktop.app.apksigner.utils.ui.UI;

import java.awt.BorderLayout;
import java.awt.Dialog;
import java.awt.FlowLayout;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.beans.Beans;

import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.SwingUtilities;
import javax.swing.border.EmptyBorder;

/**
 * The preferences dialog.
 * 
 * @author Hai Bison
 * 
 */
public class DialogPreferences extends JDialog {

    /**
     * Auto-generated by Eclipse.
     */
    private static final long serialVersionUID = -2538536937457934560L;

    /**
     * The class name.
     */
    private static final String CLASSNAME = DialogPreferences.class.getName();

    /**
     * This key holds the last tab index.
     */
    private static final String PKEY_LAST_TAB_INDEX = CLASSNAME
            + ".last_tab_index";

    private final JPanel contentPanel = new JPanel();

    /**
     * Create the dialog.
     */
    public DialogPreferences(Window owner) {
        super(owner, Messages.getString(R.string.settings),
                Dialog.ModalityType.APPLICATION_MODAL);

        setBounds(0, 0, 630, 270);
        getContentPane().setLayout(new BorderLayout(10, 10));
        contentPanel.setLayout(new FlowLayout());
        contentPanel.setBorder(new EmptyBorder(5, 5, 5, 5));
        getContentPane().add(contentPanel, BorderLayout.SOUTH);
        {
            JPanel buttonPane = new JPanel();
            buttonPane.setLayout(new FlowLayout(FlowLayout.RIGHT));
            getContentPane().add(buttonPane, BorderLayout.SOUTH);
            {
                JButton okButton = new JButton(Messages.getString(R.string.ok));
                okButton.addActionListener(mBtnOkActionListener);
                buttonPane.add(okButton);
                getRootPane().setDefaultButton(okButton);
            }
            {
                JButton cancelButton = new JButton(
                        Messages.getString(R.string.cancel));
                cancelButton.addActionListener(mBtnCancelActionListener);
                buttonPane.add(cancelButton);
            }
        }
        {
            mTabbedPane = new JTabbedPane(JTabbedPane.TOP);
            getContentPane().add(mTabbedPane, BorderLayout.CENTER);
            UI.initJTabbedPaneHeaderMouseWheelListener(mTabbedPane);
        }

        /*
         * CUSTOM INITIALIZATIONS
         */

        addWindowListener(mWindowAdapter);
        Preferences.getInstance().beginTransaction();
        initTabs();
    }// DialogPreferences()

    /**
     * Initializes tabs.
     */
    private void initTabs() {
        if (Beans.isDesignTime())
            return;

        /*
         * Initialization of panels are slow. So we should put this block into a
         * `Runnable`.
         */
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                mTabbedPane.add(
                        Messages.getString(R.string.internet_connection),
                        new PanelInternetConnection());

                /*
                 * Select the last tab index.
                 */

                int lastTabIndex = 0;
                try {
                    lastTabIndex = Integer.parseInt(Preferences.getInstance()
                            .get(PKEY_LAST_TAB_INDEX));
                } catch (Exception e) {
                    /*
                     * Ignore it.
                     */
                }

                if (lastTabIndex >= mTabbedPane.getTabCount())
                    lastTabIndex = mTabbedPane.getTabCount() - 1;
                if (lastTabIndex < 0)
                    lastTabIndex = 0;

                mTabbedPane.setSelectedIndex(lastTabIndex);
            }// run()
        });
    }// initTabs()

    /**
     * Closes this dialog.
     */
    public void closeDialog() {
        dispatchEvent(new WindowEvent(DialogPreferences.this,
                WindowEvent.WINDOW_CLOSING));
    }// closeDialog()

    /*
     * LISTENERS
     */

    private final WindowAdapter mWindowAdapter = new WindowAdapter() {

        @Override
        public void windowClosing(WindowEvent e) {
            L.d("%s >> windowClosing()",
                    DialogPreferences.class.getSimpleName());

            Preferences.getInstance().set(PKEY_LAST_TAB_INDEX,
                    Integer.toString(mTabbedPane.getSelectedIndex()));
            Preferences.getInstance().store();
        }// windowClosing()
    };// mWindowAdapter

    private final ActionListener mBtnOkActionListener = new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            Preferences.getInstance().endTransaction();
            closeDialog();
        }// actionPerformed()
    };// mBtnOkActionListener

    private final ActionListener mBtnCancelActionListener = new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            Preferences.getInstance().cancelTransaction();
            closeDialog();
        }// actionPerformed()
    };// mBtnCancelActionListener
    private JTabbedPane mTabbedPane;
}
