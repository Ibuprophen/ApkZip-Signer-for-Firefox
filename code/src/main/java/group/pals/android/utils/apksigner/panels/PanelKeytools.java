/*
 *    Copyright (C) 2012 Hai Bison
 *
 *    See the file LICENSE at the root directory of this project for copying
 *    permission.
 */
package group.pals.android.utils.apksigner.panels;

import group.pals.android.utils.apksigner.MainFrame;
import group.pals.android.utils.apksigner.panels.ui.JEditorPopupMenu;
import group.pals.android.utils.apksigner.utils.Constants;
import group.pals.android.utils.apksigner.utils.Files;
import group.pals.android.utils.apksigner.utils.KeyTools;
import group.pals.android.utils.apksigner.utils.MsgBox;
import group.pals.android.utils.apksigner.utils.UI;
import group.pals.android.utils.apksigner.utils.prefs.Prefs;
import java.awt.Color;
import java.io.File;

/**
 * The panel for keystore utilities.
 *
 * @author Hai Bison
 */
public class PanelKeytools extends javax.swing.JPanel {

    private final MainFrame mMainFrame;
    private final Prefs mPrefs = Prefs.getInstance();
    private static final String KEY_KEYFILE_LAST_WORKING_DIR = PanelKeytools.class.getName() + ".key-file-last-working-dir";
    private File mKeyFile;

    /**
     * Creates new form PanelKeytool
     *
     * @param mainFrame the main frame.
     */
    public PanelKeytools(MainFrame mainFrame) {
        mMainFrame = mainFrame;

        initComponents();
        UI.setEditorPopupMenu(this, new JEditorPopupMenu());
    }//PanelKeytool()

    /**
     * Gets the keystore file.
     *
     * @return the key file
     */
    public File getKeyFile() {
        return mKeyFile;
    }//getKeyFile()

    /**
     * Sets the keystore file.
     *
     * @param file the key file to set.
     */
    public void setKeyFile(File file) {
        mKeyFile = file;
        mBtnLoadKeystoreFile.setText(file == null ? "Load key-file..." : String.format("[ %s ]", file.getName()));
        mBtnLoadKeystoreFile.setForeground(file == null ? Color.cyan : UI.COLOUR_SELECTED_FILE);
    }//setKeyFile()

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mBtnLoadKeystoreFile = new javax.swing.JButton();
        mTextPwd = new javax.swing.JPasswordField();
        mBtnListEntries = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        mTextInfo = new javax.swing.JTextArea();

        setLayout(new java.awt.GridBagLayout());

        mBtnLoadKeystoreFile.setText("Load Keystore file…");
        mBtnLoadKeystoreFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mBtnLoadKeystoreFileActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(mBtnLoadKeystoreFile, gridBagConstraints);

        mTextPwd.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        mTextPwd.setBorder(javax.swing.BorderFactory.createTitledBorder("Password:"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(mTextPwd, gridBagConstraints);

        mBtnListEntries.setText("List Entries…");
        mBtnListEntries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mBtnListEntriesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        add(mBtnListEntries, gridBagConstraints);

        mTextInfo.setEditable(false);
        mTextInfo.setColumns(20);
        mTextInfo.setFont(new java.awt.Font("Monospaced", 0, 10)); // NOI18N
        mTextInfo.setRows(5);
        jScrollPane1.setViewportView(mTextInfo);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(9, 9, 9, 9);
        add(jScrollPane1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void mBtnListEntriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mBtnListEntriesActionPerformed
        if (getKeyFile() == null || !getKeyFile().isFile()) {
            MsgBox.showErrMsg(null, null, "Key-file does not exist");
            return;
        }

        if (mTextPwd.getPassword() == null || mTextPwd.getPassword().length == 0) {
            MsgBox.showErrMsg(null, null, "Password is empty");
            return;
        }

        CharSequence result = KeyTools.listEntries(
                mMainFrame.getJdkDir(), getKeyFile(), mTextPwd.getPassword());
        mTextInfo.setText(result.toString());
    }//GEN-LAST:event_mBtnListEntriesActionPerformed

    private void mBtnLoadKeystoreFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mBtnLoadKeystoreFileActionPerformed
        File f = Files.chooseFile(new File(mPrefs.get(KEY_KEYFILE_LAST_WORKING_DIR, "/")),
                Constants.REGEX_KEYSTORE_FILES, Constants.DESC_KEYSTORE_FILES);
        if (f != null) {
            setKeyFile(f);
            mPrefs.set(KEY_KEYFILE_LAST_WORKING_DIR, f.getParent());
        }
    }//GEN-LAST:event_mBtnLoadKeystoreFileActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton mBtnListEntries;
    private javax.swing.JButton mBtnLoadKeystoreFile;
    private javax.swing.JTextArea mTextInfo;
    private javax.swing.JPasswordField mTextPwd;
    // End of variables declaration//GEN-END:variables
}
