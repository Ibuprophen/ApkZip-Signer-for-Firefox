/*
 *   Copyright 2012 Hai Bison
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

/*
 * PanelSigner.java
 *
 * Created on Feb 15, 2012, 6:57:44 PM
 */
package group.pals.android.utils.apksigner.panels;

import group.pals.android.utils.apksigner.MainFrame;
import group.pals.android.utils.apksigner.utils.Files;
import group.pals.android.utils.apksigner.utils.MsgBox;
import group.pals.android.utils.apksigner.utils.Signer;
import group.pals.android.utils.apksigner.utils.UI;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import javax.swing.DefaultComboBoxModel;

/**
 *
 * @author Hai Bison
 */
public class PanelSigner extends javax.swing.JPanel {

    private final MainFrame MF;

    /** Creates new form PanelSigner */
    public PanelSigner(MainFrame m) {
        MF = m;

        initComponents();
        setKeyFile(null);
        setApkFile(null);

        btnLoadKeyFile.addActionListener(BtnLoadKeyFileListener);
        btnLoadApkFile.addActionListener(BtnLoadApkFileListener);
        btnSignFile.addActionListener(BtnSignListener);
//        btnSignFile.setEnabled(false);

        txtPwd.addKeyListener(TxtPwdKeyListener);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        btnLoadKeyFile = new javax.swing.JButton();
        txtPwd = new javax.swing.JPasswordField();
        cbxAliases = new javax.swing.JComboBox();
        txtAliasPwd = new javax.swing.JPasswordField();
        btnLoadApkFile = new javax.swing.JButton();
        btnSignFile = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        btnLoadKeyFile.setText("jButton1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        add(btnLoadKeyFile, gridBagConstraints);

        txtPwd.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtPwd.setBorder(javax.swing.BorderFactory.createTitledBorder("Password:"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(txtPwd, gridBagConstraints);

        cbxAliases.setEditable(true);
        cbxAliases.setBorder(javax.swing.BorderFactory.createTitledBorder("Aliases:"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(cbxAliases, gridBagConstraints);

        txtAliasPwd.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtAliasPwd.setBorder(javax.swing.BorderFactory.createTitledBorder("Alias password:"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(txtAliasPwd, gridBagConstraints);

        btnLoadApkFile.setText("jButton1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        add(btnLoadApkFile, gridBagConstraints);

        btnSignFile.setText("Sign!");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weighty = 1.0;
        add(btnSignFile, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLoadApkFile;
    private javax.swing.JButton btnLoadKeyFile;
    private javax.swing.JButton btnSignFile;
    private javax.swing.JComboBox cbxAliases;
    private javax.swing.JPasswordField txtAliasPwd;
    private javax.swing.JPasswordField txtPwd;
    // End of variables declaration//GEN-END:variables

    private File keyFile;

    /**
     * @return the keyFile
     */
    public File getKeyFile() {
        return keyFile;
    }

    /**
     * @param file the keyFile to set
     */
    public void setKeyFile(File file) {
        this.keyFile = file;
        btnLoadKeyFile.setText(file == null ? "Load key-file..." : String.format("[ %s ]", file.getName()));
        btnLoadKeyFile.setForeground(file == null ? Color.black : UI.SelectedFileColor);
        DefaultComboBoxModel model = (DefaultComboBoxModel) cbxAliases.getModel();
        model.removeAllElements();
    }
    private File apkFile;

    /**
     * @return the keyFile
     */
    public File getApkFile() {
        return apkFile;
    }

    /**
     * @param file the keyFile to set
     */
    public void setApkFile(File file) {
        this.apkFile = file;
        btnLoadApkFile.setText(file == null ? "Load apk-file..." : String.format("[ %s ]", file.getName()));
        btnLoadApkFile.setForeground(file == null ? Color.black : UI.SelectedFileColor);
    }

    /*
     * LISTENERS
     */
    private final ActionListener BtnLoadKeyFileListener = new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            File file = Files.chooseFile(null);
            if (file != null) {
                setKeyFile(file);
            }
        }
    };//BtnLoadKeyFileListener
    private final ActionListener BtnLoadApkFileListener = new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            File file = Files.chooseFile(null);
            if (file != null) {
                setApkFile(file);
            }
        }
    };//BtnLoadApkFileListener
    private final ActionListener BtnSignListener = new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            if (getKeyFile() == null || !getKeyFile().isFile()) {
                MsgBox.showErrMsg(null, null, "Key-file does not exist");
                return;
            }
            if (getApkFile() == null || !getApkFile().isFile()) {
                MsgBox.showErrMsg(null, null, "APK file does not exist");
                return;
            }
            String alias = String.valueOf(cbxAliases.getSelectedItem() == null ? "" : cbxAliases.getSelectedItem());
            if (alias.isEmpty()) {
                MsgBox.showErrMsg(null, null, "Alias is empty");
                return;
            }

            try {
                String info = Signer.sign(MF.getJdkDir(), getApkFile(), getKeyFile(), new String(txtPwd.getPassword()), alias, new String(txtAliasPwd.getPassword()));
                MsgBox.showHugeInfoMsg(null, null, info.length() == 0 ? "APK is signed" : info, 600, 300);
            } catch (Exception ex) {
                MsgBox.showErrMsg(null, null, "Error while signing file. Please try again.\n\nDetails:\n" + ex);
            }
        }
    };//BtnSignListener
    /**
     * TODO: load aliases automatically, and let user to be able to choose them
     */
    private final KeyListener TxtPwdKeyListener = new KeyAdapter() {

        @Override
        public void keyTyped(KeyEvent e) {
//            try {
//                KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
//
//                char[] pwd = txtPwd.getPassword();
//                
//                java.io.FileInputStream fis = null;
//                try {
//                    fis = new java.io.FileInputStream("keyStoreName");
//                    ks.load(fis, pwd);
//
//                    // get my private key
//                    KeyStore.PrivateKeyEntry pkEntry = (KeyStore.PrivateKeyEntry) ks.getEntry("privateKeyAlias", pwd);
//                    PrivateKey myPrivateKey = pkEntry.getPrivateKey();
//                } finally {
//                    if (fis != null) {
//                        fis.close();
//                    }
//                }
//            } catch (Exception ex) {
//            }
        }
    };//TxtPwdKeyListener
}
